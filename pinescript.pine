///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

EMA triangle Symbol Lib

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//@version=5
indicator(title="EMA triangle Lib", overlay=true)

// Input lengths
len = 1
len_ha = 1
len1 = 21
len2 = 34
len3 = 50

// Calculate Heiken Ashi candles
o = ta.ema(open, len)
c = ta.ema(close, len)
h = ta.ema(high, len)
l = ta.ema(low, len)

haclose = (o + h + l + c) / 4
var float haopen = na
haopen := na(haopen[1]) ? (o + c) / 2 : (haopen[1] + haclose[1]) / 2
hahigh = math.max(h, math.max(haopen, haclose))
halow = math.min(l, math.min(haopen, haclose))

// Smoothed Heiken Ashi candles
smooth_ha_open = ta.ema(haopen, len_ha)
smooth_ha_close = ta.ema(haclose, len_ha)
smooth_ha_high = ta.ema(hahigh, len_ha)
smooth_ha_low = ta.ema(halow, len_ha)


// Calculate EMA trends
EMA0 = ta.ema(smooth_ha_close, 1)
EMA1 = ta.ema(smooth_ha_close, len1)
EMA2 = ta.ema(smooth_ha_close, len2)
EMA3 = ta.ema(smooth_ha_close, len3)

// Define bullish and bearish conditions
Bull1 = EMA1 < EMA0
Bull2 = EMA2 < EMA0
Bull3 = EMA3 < EMA0

Bear1 = EMA1 > EMA0
Bear2 = EMA2 > EMA0
Bear3 = EMA3 > EMA0

bullish = Bull1 and Bull2 and Bull3
bearish = Bear1 and Bear2 and Bear3

// Track previous state
var bool prevBullish = na
var bool prevBearish = na

// Check if trend changes
trendChangeBullish = na(prevBullish) ? false : (not prevBullish and bullish)
trendChangeBearish = na(prevBearish) ? false : (not prevBearish and bearish)


// Update previous state
prevBullish := bullish
prevBearish := bearish

// Plot trend change shapes// Plotting

plotshape(series=trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.belowbar, color=#00ff00, size=size.small, title="Bullish Trend Change")
plotshape(series=trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.abovebar, color=#ff0000, size=size.small, title="Bearish Trend Change")
plotshape(series=bullish and not trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.top, color=#00000000, size=size.small, title="Bullish State")
plotshape(series=bearish and not trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.top, color=#00000000, size=size.small, title="Bearish State")


// Define alert condition
alertcondition(trendChangeBullish or trendChangeBearish, title="Trend Change Alert", message="Trend change detected.")


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

RSI Candle Lib

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//@version=5
indicator("RSI Candle Lib", overlay=false)

import lastguru/DominantCycle/2 as d

// Custom functions
grad_100(src)=>
    color out = switch int(src)
        0 => color.new(#1500FF , 20)
        1 => color.new(#1709F6 , 20)
        // (Other colors here)...
        99 => color.new(#2A2A2A , 20)
        100 => color.new(#220027 , 20)
    out

// Custom cosh function
cosh(float x) =>
    (math.exp(x) + math.exp(-x)) / 2

// Custom acosh function
acosh(float x) =>
    x < 1 ? na : math.log(x + math.sqrt(x * x - 1))

// Custom sinh function
sinh(float x) =>
    (math.exp(x) - math.exp(-x)) / 2

// Custom asinh function
asinh(float x) =>
    math.log(x + math.sqrt(x * x + 1))

// Chebyshev Type I Moving Average
chebyshevI(float src, float len, float ripple) =>
    a = 0.
    b = 0.
    g = 0.
    chebyshev = 0.
    
    a := cosh(1 / len * acosh(1 / (1 - ripple)))
    b := sinh(1 / len * asinh(1 / ripple))
    g := (a - b) / (a + b)
    chebyshev := (1 - g) * src + g * nz(chebyshev[1])
    chebyshev

// Heikin Ashi calculations
ha_close(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_close = (Open + High + Low + Close) / 4
    out = enable == true ? ha_close : Close

ha_open(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_open  = float(na)
    ha_close = ha_close(Open, High, Low, Close)
    ha_open := na(ha_open[1]) ? (Open + Close) / 2 : (nz(ha_open[1]) + nz(ha_close[1])) / 2 
    out = enable == true ? ha_open : Open

ha_high(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_close = ha_close(Open, High, Low, Close)
    ha_open  = ha_open(Open, High, Low, Close)
    ha_high  = math.max(High, math.max(ha_open, ha_close))
    out = enable == true ? ha_high : High

ha_low(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_close = ha_close(Open, High, Low, Close)
    ha_open  = ha_open(Open, High, Low, Close)
    ha_low = math.min(Low,  math.min(ha_open, ha_close))
    out = enable == true ? ha_low : Low

rsi(source = close, length = 14, smoothing = 3)=>
    close_filtered = chebyshevI(source, smoothing, 0.5)
    up = math.max(ta.change(close_filtered), 0)
    down = -math.min(ta.change(close_filtered), 0)
    up_filtered = chebyshevI(up, length, 0.5)
    down_filtered = chebyshevI(down, length, 0.5)
    rsi = down_filtered == 0 ? 100 : 100 - (100 / (1 + up_filtered / down_filtered))

// User inputs
style = input.string("Candle With Patterns", "Style", ["Candle", "Candle With Patterns", "Heikin Ashi", "Line"], inline = "Style")
color_candles = input.bool(false, "Colorize", "Color the candles based on the RSI value.", "Style")
ashi = style == "Heikin Ashi"
not_line = style != "Line"
length = input.float(24, "Length", 3, 500, 0.5)
smoothing = input.float(3, "Smoothing", 1, 500, 0.25)
colour_enable = input.bool(false, "Color Candles Overlay", "Enable this to color the chart's candles.")

// Calculate RSI and Heikin Ashi values
rsi_open = rsi(open, length, smoothing)
rsi_high = rsi(high, length, smoothing)
rsi_low = rsi(low, length, smoothing)
rsi_close = rsi(close, length, smoothing)

ha_close = ha_close(rsi_open, rsi_high, rsi_low, rsi_close, ashi)
ha_open = ha_open(rsi_open, rsi_high, rsi_low, rsi_close, ashi)
ha_high = ha_high(rsi_open, rsi_high, rsi_low, rsi_close, ashi)
ha_low = ha_low(rsi_open, rsi_high, rsi_low, rsi_close, ashi)

OHLC4 = math.avg(ha_close, ha_open, ha_high, ha_low)
grad_100 = grad_100(ha_close)

// Plot candles
bullish_color = #00ff00
bearish_color = #ff0000

colour = color_candles ? grad_100 : ha_close > ha_open ? bullish_color : bearish_color
plotcandle(not_line ? ha_open : na, not_line ? ha_high : na, not_line ? ha_low : na, not_line ? ha_close : na, "RSI HA Candles", colour, colour, bordercolor = colour)



///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

SuperTrend Lib

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//@version=5
indicator(title="supertrend Lib", overlay = false)

//Input Parameters
period_ = 14
leng = 14
len_st = 7
stFactor = 0.3
stPeriod = 10
green = #00ff00
red = #ff0000
l_st = 20

//ATR Calculation
atrr(float source, int atr_length) =>
	highest = ta.highest(source, atr_length)
    lowest = ta.lowest(source, atr_length)
    trueRange = na(highest[1]) ? highest - lowest : math.max(math.max(highest - lowest, math.abs(highest - source[1])), math.abs(lowest - source[1]))
    ta.rma(trueRange, atr_length)


//SuperTrend Calculation
supertrend(factor, atrPeriod, srcc) =>
    src = srcc
    atr = atrr(srcc, atrPeriod)
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or src[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or src[1] > prevUpperBand ? upperBand : prevUpperBand
    int stDirection = na
    float stValue = na
    prevStValue = stValue[1]
    if na(atr[1])
        stDirection := 1
    else if prevStValue == prevUpperBand
        stDirection := src > upperBand ? -1 : 1
    else
        stDirection := src < lowerBand ? 1 : -1
    stValue := stDirection == -1 ? lowerBand : upperBand
    [stValue, stDirection]


//Main Calculation
barsback = period_/2 + 1
ma = ta.sma(close, period_)
dpo = close - ma[barsback]
sd = dpo / (ta.ema(high - low, period_)) * 100


//Supertrend Application
src = sd
high_ = ta.highest(src, len_st)
low_ = ta.lowest(src, len_st)
value = 0.0
round_(val) => val > .99 ? .999 : val < -.99 ? -.999 : val
value := round_(.66 * ((src - low_) / (high_ - low_) - .5) + .67 * nz(value[1]))
fish1 = 0.0
fish1 := .5 * math.log((1 + value) / (1 - value)) + .5 * nz(fish1[1])
fish1 := ta.hma(fish1, l_st)
[stValue, stDirection] = supertrend(stFactor, stPeriod, fish1)

//Plotting
plot(fish1, color = fish1 > stValue ? green : red, style = plot.style_linebr)



///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

MACD Normalized Lib

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//@version=5
//indicator("MACD PC Trail", explicit_plot_zorder = true, timeframe = '', timeframe_gaps = false)
indicator("MACD PC Trail",overlay = false)

// Inputs
fast_length      = input.int(10, "Fast Length", 1)
slow_length      = input.int(22, "Slow Length", 1)
average_length   = input.int(42, "Average Length", 1)
deviation        = input.float(2, "Upper Deviation", 0, 100, 0.125)
middle_deviation = input.float(1, "Middle Deviation", 0, 100, 0.125)

// EMA and DEMA Functions

ema(src, len) => //{
    alpha = 2 / (len + 1)
    sum   = 0.0
    sum  := na(sum[1]) ? src : alpha * src + (1 - alpha) * nz(sum[1])


dema(float src, float len) =>
    e = ema(src, len)
    dema = 2 * e - ema(e, len)
    dema


ema(source)=>
    var float ema = 0.0
    var int count = 0
    count := nz(count[1]) + 1
    ema := (1.0 - 2.0 / (count + 1.0)) * nz(ema[1]) + 2.0 / (count + 1.0) * source
    ema

tma(src, int len) => //{
    //src is an input.source
    //len is an input.int
    ema1 = ema(src, len)
    ema2 = ema(ema1, len)
    ema3 = ema(ema2, len)
    tma  = 3 * (ema1 - ema2) + ema3

// Gradient Functions

grad_high(values)=>
    switch values
        38 => color.rgb(0, 255, 0)
        37 => color.rgb(0, 255, 0)
        36 => color.rgb(0, 255, 0)
        35 => color.rgb(0, 255, 0)
        34 => color.rgb(0, 255, 0)
        33 => color.rgb(0, 255, 0)
        32 => color.rgb(0, 255, 0)
        31 => color.rgb(0, 255, 0)
        30 => color.rgb(0, 255, 0)
        29 => color.rgb(0, 255, 0)
        28 => color.rgb(0, 255, 0)
        27 => color.rgb(0, 255, 0)
        26 => color.rgb(0, 255, 0)
        25 => color.rgb(0, 255, 0)
        24 => color.rgb(0, 255, 0)
        23 => color.rgb(0, 255, 0)
        22 => color.rgb(0, 255, 0)
        

grad_low(values)=>
    switch 39 - values
        39 => #eb0027
        38 => color.rgb(255, 0, 0)
        37 => color.rgb(255, 0, 0)
        36 => color.rgb(255, 0, 0)
        35 => color.rgb(255, 0, 0)
        34 => color.rgb(255, 0, 0)
        33 => color.rgb(255, 0, 0)
        32 => color.rgb(255, 0, 0)
        31 => color.rgb(255, 0, 0)
        30 => color.rgb(255, 0, 0)
        29 => color.rgb(255, 0, 0)
        28 => color.rgb(255, 0, 0)
        27 => color.rgb(255, 0, 0)
        26 => color.rgb(255, 0, 0)
        25 => color.rgb(255, 0, 0)
        24 => color.rgb(255, 0, 0)
        23 => color.rgb(255, 0, 0)
        22 => color.rgb(255, 0, 0)
        
// Angle and Degrees Functions        

atan2(y, x) =>
    var float angle = 0.0
    if x > 0
        angle := math.atan(y / x)
    else
        if x < 0 and y >= 0
            angle := math.atan(y / x) + math.pi
        else
            if x < 0 and y < 0
                angle := math.atan(y / x) - math.pi
            else
                if x == 0 and y > 0
                    angle := math.pi / 2
                else
                    if x == 0 and y < 0
                        angle := -math.pi / 2
    angle
 
degrees(float source) =>
    source * 180 / math.pi

trend_angle(source, length) =>
    atr = ema(ta.highest(source, length) - ta.lowest(source, length))
    slope = (source - source[length]) / (atr/(length) * length)
    angle_rad = atan2(slope, 1)
    degrees = degrees(angle_rad)
    normalized = int((90 + degrees)/180 * 39)

// Noise Gate Function

noise_gate(signal, ratio, level, knee_type) =>
    // Calculate the absolute value of the signal
    abs_signal = math.abs(signal)

    // Check the value of the knee_type parameter
    if knee_type == "hard"
        // If the knee_type is "hard", apply a hard knee
        if abs_signal > level
            out = signal
        else
            out = signal / ratio
    else
        // If the knee_type is not "hard", apply a soft knee
        if (abs_signal > level) or level == 0
            // If the absolute value is above the threshold, return the signal as is
            out = signal
        else
            // If the absolute value is below the threshold, calculate the soft knee ratio
            soft_knee_ratio = 1 - (level - abs_signal) / level
            // Reduce the amplitude of the signal by the soft knee ratio
            out = signal * soft_knee_ratio

// Main Calculations

High = ta.sma(high, average_length)
Low = ta.sma(low, average_length)

signal = tma(hl2, fast_length)
signal_2 = dema(hl2, slow_length)

avg = math.avg(High, Low)

top = High - avg
bot = Low - avg

fast = signal - avg
slow = signal_2 - avg

stdev_up = ta.stdev(high, average_length)
stdev_down = ta.stdev(low, average_length)
stdev_center = ta.stdev(hl2, average_length)
stdev_avg = nz(math.avg(stdev_up, stdev_down, stdev_center))
stdev_percent = ta.percentrank(stdev_avg, int(average_length))

max = top + stdev_up * deviation
min = bot - stdev_down * deviation
signal_fast = ((fast - min) / (max - min)) * 100
signal_slow = ((slow - min) / (max - min)) * 100


macd = noise_gate(signal_fast - signal_slow, 5, 0.03, "hard")
macd_angle = trend_angle(macd, 2)
macd_color = color.new(macd > 0 ? grad_high(macd_angle) : grad_low(macd_angle), 10)
 
//Plotting

plot(macd + 50, "MACD", macd_color, style = plot.style_linebr, linewidth = 3, histbase = 50)


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

SuperTend Cross Symbol Lib

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//@version=5
indicator(title="SuperTrend Cross Symbol", overlay=true)

// Input parameters
relativeStrengthIndexLength = 14
smoothingLength = 21
rsiInputSource = close
isSmoothed = false

movingAverageLength = 14
movingAverageType = "HMA"
showMovingAverage = true

trendFactor = 0.8
averageTrueRangeLength = 10

colorUp = #00ff00
colorDown = #ff0000

// MA Selection
calculateMA(source, length, type) =>
    switch type
        "HMA" => ta.hma(source, length)

// Function to calculate ATR
calculateATR(source, atrLength) =>
    highestHigh = ta.highest(source, atrLength)
    lowestLow = ta.lowest(source, atrLength)
    trueRange = na(highestHigh[1]) ? highestHigh - lowestLow : math.max(highestHigh - lowestLow, math.abs(highestHigh - source[1]), math.abs(lowestLow - source[1]))
    ta.rma(trueRange, atrLength)

// Function to calculate Supertrend
calculateSupertrend(factor, atrPeriod, source) =>
    priceSource = source
    atr = calculateATR(source, atrPeriod)
    upperBand = priceSource + factor * atr
    lowerBand = priceSource - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or source[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or source[1] > prevUpperBand ? upperBand : prevUpperBand
    int trendDirection = na
    float supertrendValue = na
    prevSupertrend = supertrendValue[1]
    if na(atr[1])
        trendDirection := 1
    else if prevSupertrend == prevUpperBand
        trendDirection := source > upperBand ? -1 : 1
    else
        trendDirection := source < lowerBand ? 1 : -1
    supertrendValue := trendDirection == -1 ? lowerBand : upperBand
    [supertrendValue, trendDirection]

// Calculating RSI
rsiValue = isSmoothed ? ta.hma(ta.rsi(rsiInputSource, relativeStrengthIndexLength), smoothingLength) : ta.rsi(rsiInputSource, relativeStrengthIndexLength)
rsiMovingAverage = calculateMA(rsiValue, movingAverageLength, movingAverageType)

// Calculating Supertrend based on RSI values
[rsiSupertrend, trendDirection] = calculateSupertrend(trendFactor, averageTrueRangeLength, rsiValue)


// Plot trend change shapes// Plotting
plotshape(rsiSupertrend, color = trendDirection == -1 ? colorUp : colorDown, title="Supertrend", style = shape.cross, size = size.auto, location = location.bottom)



///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

RSI SuperTrend Signal Cross and SuperTrend with EMA Signal Traingle

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//@version=5
indicator(title="RSI SuperTrend Signal Cross and SuperTrend with EMA Signal Traingle", overlay=false)

// Input lengths

len = 1
len_ha = 1
len1 = 21
len2 = 34
len3 = 50

period_ = 14
leng = 14
len_st = 7
stFactor = 0.3
stPeriod = 10
green = #00ff00
red = #ff0000
l_st = 20

colorUp = #00ff00
colorDown = #ff0000

relativeStrengthIndexLength = 14
smoothingLength = 21
rsiInputSource = close
isSmoothed = false


// Calculate Heiken Ashi candles
o = ta.ema(open, len)
c = ta.ema(close, len)
h = ta.ema(high, len)
l = ta.ema(low, len)

haclose = (o + h + l + c) / 4
var float haopen = na
haopen := na(haopen[1]) ? (o + c) / 2 : (haopen[1] + haclose[1]) / 2
hahigh = math.max(h, math.max(haopen, haclose))
halow = math.min(l, math.min(haopen, haclose))

// Smoothed Heiken Ashi candles
smooth_ha_open = ta.ema(haopen, len_ha)
smooth_ha_close = ta.ema(haclose, len_ha)
smooth_ha_high = ta.ema(hahigh, len_ha)
smooth_ha_low = ta.ema(halow, len_ha)


// Calculate EMA trends
EMA0 = ta.ema(smooth_ha_close, 1)
EMA1 = ta.ema(smooth_ha_close, len1)
EMA2 = ta.ema(smooth_ha_close, len2)
EMA3 = ta.ema(smooth_ha_close, len3)

// Define bullish and bearish conditions
Bull1 = EMA1 < EMA0
Bull2 = EMA2 < EMA0
Bull3 = EMA3 < EMA0

Bear1 = EMA1 > EMA0
Bear2 = EMA2 > EMA0
Bear3 = EMA3 > EMA0

bullish = Bull1 and Bull2 and Bull3
bearish = Bear1 and Bear2 and Bear3

// Track previous state
var bool prevBullish = na
var bool prevBearish = na

// Check if trend changes
trendChangeBullish = na(prevBullish) ? false : (not prevBullish and bullish)
trendChangeBearish = na(prevBearish) ? false : (not prevBearish and bearish)


// Update previous state
prevBullish := bullish
prevBearish := bearish


movingAverageLength = 14
movingAverageType = "HMA"
showMovingAverage = true

trendFactor = 0.8
averageTrueRangeLength = 10


// MA Selection
calculateMA(source, length, type) =>
    switch type
        "HMA" => ta.hma(source, length)


// Function to calculate ATR
calculateATR(source, atrLength) =>
    highestHigh = ta.highest(source, atrLength)
    lowestLow = ta.lowest(source, atrLength)
    trueRange = na(highestHigh[1]) ? highestHigh - lowestLow : math.max(highestHigh - lowestLow, math.abs(highestHigh - source[1]), math.abs(lowestLow - source[1]))
    ta.rma(trueRange, atrLength)

// Function to calculate Supertrend
calculateSupertrend(factor, atrPeriod, source) =>
    priceSource = source
    atr = calculateATR(source, atrPeriod)
    upperBand = priceSource + factor * atr
    lowerBand = priceSource - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or source[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or source[1] > prevUpperBand ? upperBand : prevUpperBand
    int trendDirection = na
    float supertrendValue = na
    prevSupertrend = supertrendValue[1]
    if na(atr[1])
        trendDirection := 1
    else if prevSupertrend == prevUpperBand
        trendDirection := source > upperBand ? -1 : 1
    else
        trendDirection := source < lowerBand ? 1 : -1
    supertrendValue := trendDirection == -1 ? lowerBand : upperBand
    [supertrendValue, trendDirection]

// Calculating RSI
rsiValue = isSmoothed ? ta.hma(ta.rsi(rsiInputSource, relativeStrengthIndexLength), smoothingLength) : ta.rsi(rsiInputSource, relativeStrengthIndexLength)
rsiMovingAverage = calculateMA(rsiValue, movingAverageLength, movingAverageType)

// Calculating Supertrend based on RSI values
[rsiSupertrend, trendDirection] = calculateSupertrend(trendFactor, averageTrueRangeLength, rsiValue)




//ATR Calculation
atrr(float source, int atr_length) =>
	highest = ta.highest(source, atr_length)
    lowest = ta.lowest(source, atr_length)
    trueRange = na(highest[1]) ? highest - lowest : math.max(math.max(highest - lowest, math.abs(highest - source[1])), math.abs(lowest - source[1]))
    ta.rma(trueRange, atr_length)


//SuperTrend Calculation
supertrend(factor, atrPeriod, srcc) =>
    src = srcc
    atr = atrr(srcc, atrPeriod)
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or src[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or src[1] > prevUpperBand ? upperBand : prevUpperBand
    int stDirection = na
    float stValue = na
    prevStValue = stValue[1]
    if na(atr[1])
        stDirection := 1
    else if prevStValue == prevUpperBand
        stDirection := src > upperBand ? -1 : 1
    else
        stDirection := src < lowerBand ? 1 : -1
    stValue := stDirection == -1 ? lowerBand : upperBand
    [stValue, stDirection]


//Main Calculation
barsback = period_/2 + 1
ma = ta.sma(close, period_)
dpo = close - ma[barsback]
sd = dpo / (ta.ema(high - low, period_)) * 100


//Supertrend Application
src = sd
high_ = ta.highest(src, len_st)
low_ = ta.lowest(src, len_st)
value = 0.0
round_(val) => val > .99 ? .999 : val < -.99 ? -.999 : val
value := round_(.66 * ((src - low_) / (high_ - low_) - .5) + .67 * nz(value[1]))
fish1 = 0.0
fish1 := .5 * math.log((1 + value) / (1 - value)) + .5 * nz(fish1[1])
fish1 := ta.hma(fish1, l_st)
[stValue, stDirection] = supertrend(stFactor, stPeriod, fish1)


// Plot trend change shapes// Plotting

plotshape(series=trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.absolute, color=#00ff00, size=size.small, title="Bullish Trend Change")
plotshape(series=trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.absolute, color=#ff0000, size=size.small, title="Bearish Trend Change")
plotshape(series=bullish and not trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.absolute, color=#00000000, size=size.small, title="Bullish State")
plotshape(series=bearish and not trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.absolute, color=#00000000, size=size.small, title="Bearish State")
plotshape(rsiSupertrend, color = trendDirection == -1 ? colorUp : colorDown, title="Supertrend", style = shape.cross, size = size.auto, location = location.bottom)
plot(fish1, color = fish1 > stValue ? green : red, style = plot.style_linebr)

// Define alert condition
alertcondition(trendChangeBullish or trendChangeBearish, title="Trend Change Alert", message="Trend change detected.")


///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////


/////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////

//RSi Candle with EMA Triangle Signal

///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// ///////////////////// /////////////////////
//@version=5
indicator("RSi Candle with EMA Triangle Signal", overlay=false)

import lastguru/DominantCycle/2 as d

// Custom functions
grad_100(src)=>
    color out = switch int(src)
        0 => color.new(#1500FF , 20)
        1 => color.new(#1709F6 , 20)
        // (Other colors here)...
        99 => color.new(#2A2A2A , 20)
        100 => color.new(#220027 , 20)
    out

// Custom cosh function
cosh(float x) =>
    (math.exp(x) + math.exp(-x)) / 2

// Custom acosh function
acosh(float x) =>
    x < 1 ? na : math.log(x + math.sqrt(x * x - 1))

// Custom sinh function
sinh(float x) =>
    (math.exp(x) - math.exp(-x)) / 2

// Custom asinh function
asinh(float x) =>
    math.log(x + math.sqrt(x * x + 1))

// Chebyshev Type I Moving Average
chebyshevI(float src, float len, float ripple) =>
    a = 0.
    b = 0.
    g = 0.
    chebyshev = 0.
    
    a := cosh(1 / len * acosh(1 / (1 - ripple)))
    b := sinh(1 / len * asinh(1 / ripple))
    g := (a - b) / (a + b)
    chebyshev := (1 - g) * src + g * nz(chebyshev[1])
    chebyshev

// Heikin Ashi calculations
ha_close(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_close = (Open + High + Low + Close) / 4
    out = enable == true ? ha_close : Close

ha_open(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_open  = float(na)
    ha_close = ha_close(Open, High, Low, Close)
    ha_open := na(ha_open[1]) ? (Open + Close) / 2 : (nz(ha_open[1]) + nz(ha_close[1])) / 2 
    out = enable == true ? ha_open : Open

ha_high(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_close = ha_close(Open, High, Low, Close)
    ha_open  = ha_open(Open, High, Low, Close)
    ha_high  = math.max(High, math.max(ha_open, ha_close))
    out = enable == true ? ha_high : High

ha_low(float Open = open, float High = high, float Low = low, float Close = close, bool enable = true) =>
    ha_close = ha_close(Open, High, Low, Close)
    ha_open  = ha_open(Open, High, Low, Close)
    ha_low = math.min(Low,  math.min(ha_open, ha_close))
    out = enable == true ? ha_low : Low

rsi(source = close, length = 14, smoothing = 3)=>
    close_filtered = chebyshevI(source, smoothing, 0.5)
    up = math.max(ta.change(close_filtered), 0)
    down = -math.min(ta.change(close_filtered), 0)
    up_filtered = chebyshevI(up, length, 0.5)
    down_filtered = chebyshevI(down, length, 0.5)
    rsi = down_filtered == 0 ? 100 : 100 - (100 / (1 + up_filtered / down_filtered))

// User inputs
style = input.string("Candle With Patterns", "Style", ["Candle", "Candle With Patterns", "Heikin Ashi", "Line"], inline = "Style")
color_candles = input.bool(false, "Colorize", "Color the candles based on the RSI value.", "Style")
ashi = style == "Heikin Ashi"
not_line = style != "Line"
length = input.float(24, "Length", 3, 500, 0.5)
smoothing = input.float(3, "Smoothing", 1, 500, 0.25)
colour_enable = input.bool(false, "Color Candles Overlay", "Enable this to color the chart's candles.")

// Calculate RSI and Heikin Ashi values
rsi_open = rsi(open, length, smoothing)
rsi_high = rsi(high, length, smoothing)
rsi_low = rsi(low, length, smoothing)
rsi_close = rsi(close, length, smoothing)

ha_close = ha_close(rsi_open, rsi_high, rsi_low, rsi_close, ashi)
ha_open = ha_open(rsi_open, rsi_high, rsi_low, rsi_close, ashi)
ha_high = ha_high(rsi_open, rsi_high, rsi_low, rsi_close, ashi)
ha_low = ha_low(rsi_open, rsi_high, rsi_low, rsi_close, ashi)

OHLC4 = math.avg(ha_close, ha_open, ha_high, ha_low)
grad_100 = grad_100(ha_close)

// Plot candles
bullish_color = #00ff00
bearish_color = #ff0000

colour = color_candles ? grad_100 : ha_close > ha_open ? bullish_color : bearish_color
//plotcandle(not_line ? ha_open : na, not_line ? ha_high : na, not_line ? ha_low : na, not_line ? ha_close : na, "RSI HA Candles", colour, colour, bordercolor = colour)

// Signal calculations
len1 = input.int(21, "EMA Length 1")
len2 = input.int(34, "EMA Length 2")
len3 = input.int(50, "EMA Length 3")

EMA0 = ta.ema(ha_close, 1)
EMA1 = ta.ema(ha_close, len1)
EMA2 = ta.ema(ha_close, len2)
EMA3 = ta.ema(ha_close, len3)

// Define bullish and bearish conditions
Bull1 = EMA1 < EMA0
Bull2 = EMA2 < EMA0
Bull3 = EMA3 < EMA0

Bear1 = EMA1 > EMA0
Bear2 = EMA2 > EMA0
Bear3 = EMA3 > EMA0

bullish = Bull1 and Bull2 and Bull3
bearish = Bear1 and Bear2 and Bear3

// Track previous state
var bool prevBullish = na
var bool prevBearish = na

// Check if trend changes
trendChangeBullish = na(prevBullish) ? false : (not prevBullish and bullish)
trendChangeBearish = na(prevBearish) ? false : (not prevBearish and bearish)

// Plot the combined shape based on trend change
plotshape(series=trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.bottom, color=#00ff00, size=size.small, title="Bullish Trend Change")
plotshape(series=trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.top, color=#ff0000, size=size.small, title="Bearish Trend Change")
plotshape(series=bullish and not trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.bottom, color=color.rgb(0, 0, 0, 100), size=size.small, title="Bullish State")
plotshape(series=bearish and not trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.bottom, color=color.rgb(0, 0, 0, 100), size=size.small, title="Bearish State")

// Update previous state
prevBullish := bullish
prevBearish := bearish

//enable_fill      = input.bool(true, "Enable Ribbon ")
fast_length      = input.int(10, "Fast Length", 1)
slow_length      = input.int(22, "Slow Length", 1)
average_length   = input.int(42, "Average Length", 1)
deviation        = input.float(2, "Upper Deviation", 0, 100, 0.125)
middle_deviation = input.float(1, "Middle Deviation", 0, 100, 0.125)

ema(src, len) => //{
    alpha = 2 / (len + 1)
    sum   = 0.0
    sum  := na(sum[1]) ? src : alpha * src + (1 - alpha) * nz(sum[1])


dema(float src, float len) =>
    e = ema(src, len)
    dema = 2 * e - ema(e, len)
    dema


ema(source)=>
    var float ema = 0.0
    var int count = 0
    count := nz(count[1]) + 1
    ema := (1.0 - 2.0 / (count + 1.0)) * nz(ema[1]) + 2.0 / (count + 1.0) * source
    ema


tma(src, int len) => //{
    //src is an input.source
    //len is an input.int
    ema1 = ema(src, len)
    ema2 = ema(ema1, len)
    ema3 = ema(ema2, len)
    tma  = 3 * (ema1 - ema2) + ema3

grad_high(values)=>
    switch values
        38 => color.rgb(0, 255, 0)
        37 => color.rgb(0, 255, 0)
        36 => color.rgb(0, 255, 0)
        35 => color.rgb(0, 255, 0)
        34 => color.rgb(0, 255, 0)
        33 => color.rgb(0, 255, 0)
        32 => color.rgb(0, 255, 0)
        31 => color.rgb(0, 255, 0)
        30 => color.rgb(0, 255, 0)
        29 => color.rgb(0, 255, 0)
        28 => color.rgb(0, 255, 0)
        27 => color.rgb(0, 255, 0)
        26 => color.rgb(0, 255, 0)
        25 => color.rgb(0, 255, 0)
        24 => color.rgb(0, 255, 0)
        23 => color.rgb(0, 255, 0)
        22 => color.rgb(0, 255, 0)
        

grad_low(values)=>
    switch 39 - values
        39 => #eb0027
        38 => color.rgb(255, 0, 0)
        37 => color.rgb(255, 0, 0)
        36 => color.rgb(255, 0, 0)
        35 => color.rgb(255, 0, 0)
        34 => color.rgb(255, 0, 0)
        33 => color.rgb(255, 0, 0)
        32 => color.rgb(255, 0, 0)
        31 => color.rgb(255, 0, 0)
        30 => color.rgb(255, 0, 0)
        29 => color.rgb(255, 0, 0)
        28 => color.rgb(255, 0, 0)
        27 => color.rgb(255, 0, 0)
        26 => color.rgb(255, 0, 0)
        25 => color.rgb(255, 0, 0)
        24 => color.rgb(255, 0, 0)
        23 => color.rgb(255, 0, 0)
        22 => color.rgb(255, 0, 0)
        
        
        
atan2(y, x) =>
    var float angle = 0.0
    if x > 0
        angle := math.atan(y / x)
    else
        if x < 0 and y >= 0
            angle := math.atan(y / x) + math.pi
        else
            if x < 0 and y < 0
                angle := math.atan(y / x) - math.pi
            else
                if x == 0 and y > 0
                    angle := math.pi / 2
                else
                    if x == 0 and y < 0
                        angle := -math.pi / 2
    angle
 
degrees(float source) =>
    source * 180 / math.pi

trend_angle(source, length) =>
    atr = ema(ta.highest(source, length) - ta.lowest(source, length))
    slope = (source - source[length]) / (atr/(length) * length)
    angle_rad = atan2(slope, 1)
    degrees = degrees(angle_rad)
    normalized = int((90 + degrees)/180 * 39)

noise_gate(signal, ratio, level, knee_type) =>
    // Calculate the absolute value of the signal
    abs_signal = math.abs(signal)

    // Check the value of the knee_type parameter
    if knee_type == "hard"
        // If the knee_type is "hard", apply a hard knee
        if abs_signal > level
            out = signal
        else
            out = signal / ratio
    else
        // If the knee_type is not "hard", apply a soft knee
        if (abs_signal > level) or level == 0
            // If the absolute value is above the threshold, return the signal as is
            out = signal
        else
            // If the absolute value is below the threshold, calculate the soft knee ratio
            soft_knee_ratio = 1 - (level - abs_signal) / level
            // Reduce the amplitude of the signal by the soft knee ratio
            out = signal * soft_knee_ratio

// 


High = ta.sma(high, average_length)
Low = ta.sma(low, average_length)

signal = tma(hl2, fast_length)
signal_2 = dema(hl2, slow_length)

avg = math.avg(High, Low)

top = High - avg
bot = Low - avg

fast = signal - avg
slow = signal_2 - avg

stdev_up = ta.stdev(high, average_length)
stdev_down = ta.stdev(low, average_length)
stdev_center = ta.stdev(hl2, average_length)
stdev_avg = nz(math.avg(stdev_up, stdev_down, stdev_center))
stdev_percent = ta.percentrank(stdev_avg, int(average_length))

max = top + stdev_up * deviation
min = bot - stdev_down * deviation
signal_fast = ((fast - min) / (max - min)) * 100
signal_slow = ((slow - min) / (max - min)) * 100


macd = noise_gate(signal_fast - signal_slow, 5, 0.03, "hard")
macd_angle = trend_angle(macd, 2)
macd_color = color.new(macd > 0 ? grad_high(macd_angle) : grad_low(macd_angle), 10)
 
plot(macd + 50, "MACD", macd_color, style = plot.style_linebr, linewidth = 3, histbase = 50)


/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////

/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////

Smoothing Heiken ashi candle with EMA Signal Triangle(BASE INDICATOR)

/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////

//@version=5
indicator(title="Smoothing Heiken ashi candle with EMA Signal Triangle(BASE INDICATOR)", overlay=false)

// Input lengths
len = input(1, title="Length for smoothing")
len_ha = input(1, title="Length for HA smoothing")
len1 = input(21, 'Length EMA1')
len2 = input(34, 'Length EMA2')
len3 = input(50, 'Length EMA3')

// Calculate Heiken Ashi candles
o = ta.ema(open, len)
c = ta.ema(close, len)
h = ta.ema(high, len)
l = ta.ema(low, len)

haclose = (o + h + l + c) / 4
var float haopen = na
haopen := na(haopen[1]) ? (o + c) / 2 : (haopen[1] + haclose[1]) / 2
hahigh = math.max(h, math.max(haopen, haclose))
halow = math.min(l, math.min(haopen, haclose))

// Smoothed Heiken Ashi candles
smooth_ha_open = ta.ema(haopen, len_ha)
smooth_ha_close = ta.ema(haclose, len_ha)
smooth_ha_high = ta.ema(hahigh, len_ha)
smooth_ha_low = ta.ema(halow, len_ha)

// Plot Heiken Ashi candles
plotcandle(smooth_ha_open, smooth_ha_high, smooth_ha_low, smooth_ha_close, color=smooth_ha_open > smooth_ha_close ? #ff0000 : #00ff00, title="Smoothed Heiken Ashi")

// Calculate EMA trends
EMA0 = ta.ema(smooth_ha_close, 1)
EMA1 = ta.ema(smooth_ha_close, len1)
EMA2 = ta.ema(smooth_ha_close, len2)
EMA3 = ta.ema(smooth_ha_close, len3)

// Define bullish and bearish conditions
Bull1 = EMA1 < EMA0
Bull2 = EMA2 < EMA0
Bull3 = EMA3 < EMA0

Bear1 = EMA1 > EMA0
Bear2 = EMA2 > EMA0
Bear3 = EMA3 > EMA0

bullish = Bull1 and Bull2 and Bull3
bearish = Bear1 and Bear2 and Bear3

// Track previous state
var bool prevBullish = na
var bool prevBearish = na

// Check if trend changes
trendChangeBullish = na(prevBullish) ? false : (not prevBullish and bullish)
trendChangeBearish = na(prevBearish) ? false : (not prevBearish and bearish)

// Plot trend change shapes
plotshape(series=trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.top, color=#00ff00, size=size.small, title="Bullish Trend Change")
plotshape(series=trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.top, color=#ff0000, size=size.small, title="Bearish Trend Change")
plotshape(series=bullish and not trendChangeBullish ? 1 : na, style=shape.triangleup, location=location.top, color=#00000000, size=size.small, title="Bullish State")
plotshape(series=bearish and not trendChangeBearish ? 1 : na, style=shape.triangledown, location=location.top, color=#00000000, size=size.small, title="Bearish State")

// Update previous state
prevBullish := bullish
prevBearish := bearish

// Define alert condition
alertcondition(trendChangeBullish or trendChangeBearish, title="Trend Change Alert", message="Trend change detected.")

/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////
/////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// /////////// ///////////




